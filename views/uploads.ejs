<!DOCTYPE html>
<html>
    <head>
        <title>jshs | Uploads</title>
        <link rel="stylesheet" href="/style.css">
        <link rel="icon" type="image/png" href="/img/favicon.png">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
    </head>
    <body>
        <%- include('../partials/navbar.ejs'); %>
        <h2>Uploads</h2>

        <p id="status"></p>
        <p><input type="text" id="searchBox" name="searchBox" onkeyup="doSearch()" placeholder="Search"></p>
        <button id="btnBackFolder">Back</button>
        <p></p>
        <div id="filesTableContainer"></div>

        <script src="js/api.js"></script>
        <script src="js/filetype.js"></script>
        <script src="js/filesize.js"></script>
        <script src="js/params.js"></script>
        <script>
            const pStatus = document.querySelector("#status");
            const ftContainer = document.querySelector("#filesTableContainer");
            const btnBackFolder = document.querySelector("#btnBackFolder");
            const searchBox = document.querySelector("#searchBox");
            btnBackFolder.style.display = "none";
            searchBox.style.display = "none";

            const startFolder = getQueryParam("startFolder");

            let folder = undefined;
            let filesTable = undefined;

            const doSearch = () => {
                const filter = searchBox.value.toLowerCase();
                const table = document.querySelector(".files-table");
                const trs = table.getElementsByTagName("tr");

                for (let i = 0; i < trs.length; i++) {
                    const td = trs[i].getElementsByTagName("td")[0];
                    if (td) {
                        const tdText = td.textContent || td.innerText;
                        if (tdText.toLowerCase().indexOf(filter) > -1) {
                            trs[i].style.display = "";
                        } else {
                            trs[i].style.display = "none";
                        }
                    }
                }
            };

            const prevFolder = () => {
                if (folder == undefined)
                    return;

                const folderSplit = folder.split("/");
                if (folderSplit.length == 1)
                    folder = undefined;
                else
                    folder = folderSplit[folderSplit.length - 2];
                getUploads();
            };

            btnBackFolder.onclick = prevFolder;

            const setFolder = f => {
                if (folder == undefined)
                    folder = f;
                else
                    folder += `/${f}`;
                getUploads();
            };

            const deleteFilesTable = () => {
                if (filesTable != undefined)
                    filesTable.remove();
            };

            const makeFilesTable = () => {
                deleteFilesTable();
                filesTable = document.createElement("table");
                filesTable.innerHTML = "<tr><th>Name</th><th>Size</th><th>Type</th><th>Actions</th></tr>";
                filesTable.classList.add("files-table");
                ftContainer.appendChild(filesTable);
            };

            const clearSearch = () => {
                searchBox.value = "";
            };

            const renameFile = fileName => {
                const newName = prompt(`New name for file '${fileName}':`);
                jshsApi.renameFile(folder, fileName, newName, response => {
                    alert(response);
                });
                getUploads();
            };

            const dlFile = fileName => {
                jshsApi.dlFile(folder, fileName);
            };

            const unzipFile = fileName => {
                jshsApi.unzipFile(folder, fileName, resp => {
                    if (resp == "OK") {
                        getUploads();
                    } else {
                        alert(`Extract failed: ${resp}`);
                    }
                });
            };

            const deleteFile = fileName => {
                const doDelete = confirm(`Do you really want to delete ${fileName}? This action cannot be undone.`);
                if (!doDelete)
                    return;

                jshsApi.deleteFile(folder, fileName, resp => {
                    if (resp == "OK") {
                        getUploads();
                    } else {
                        alert(`Delete failed: ${resp}`);
                    }
                });
            };

            const getUploads = () => {
                makeFilesTable();
                clearSearch();
                pStatus.innerText = "[loading]";

                if (folder != undefined) {
                    btnBackFolder.style.display = "block";
                } else {
                    btnBackFolder.style.display = "none";
                }

                searchBox.style.display = "none";

                jshsApi.getUploads(folder, data => {
                    if (data.errCode != 0) {
                        switch (data.errCode) {
                        case 1:
                            pStatus.innerText = "Error: directory traversal attack";
                            break;
                        }
                    } else {
                        // count files
                        let numFiles = 0;
                        let numDirs = 0;
                        data.files.forEach((file, i) => {
                            if (file.isDir) {
                                numDirs++;
                            } else {
                                numFiles++;
                            }

                            let fileLink;
                            if (file.isDir) {
                                fileLink = `<a href="javascript:setFolder('${file.name}')">${file.name}/</a>`;
                            } else {
                                let viewFileUrl = `/viewFile?name=${file.name}`;
                                if (folder != undefined) {
                                    viewFileUrl += `&folder=${folder}`;
                                }
                                fileLink = `<a href="${viewFileUrl}">${file.name}</a>`;
                            }
                            const classAttr = (i % 2 == 0) ? " class=\"ft-row-even\"" : "";
                            const renameLink = `<a href="javascript:renameFile('${file.name}')">Rename</a>`;
                            const fileSize = strFileSize(file.size);
                            const dlLink = file.isDir ? "" : ` | <a href="javascript:dlFile('${file.name}')">Download</a>`;
                            const unzLink = file.mimeType == "application/zip" ? ` | <a href="javascript:unzipFile('${file.name}');">Extract</a>` : "";
                            const delLink = ` | <a href="javascript:deleteFile('${file.name}')">Delete</a>`;
                            filesTable.innerHTML += `<tr${classAttr}><td>${fileLink}</td><td>${fileSize}</td><td>${file.isDir ? "Folder" : getFileType(file.mimeType, file.name)}</td><td>${renameLink}${dlLink}${unzLink}${delLink}</td></tr>`;
                        });
                        pStatus.innerText = `Found ${numFiles} files and ${numDirs} folders`;
                        if (folder != undefined) {
                            pStatus.innerText += ` in folder '${folder}'`;
                        }
                    }
                });

                searchBox.style.display = "block";
            };

            setFolder(startFolder);
        </script>
    </body>
</html>
